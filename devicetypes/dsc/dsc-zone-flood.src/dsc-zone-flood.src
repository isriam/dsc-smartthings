/*
 *  DSC Zone Motion Device
 *
 *  Author: Jordan <jordan@xeron.cc>
 *  Original Author: Matt Martz <matt.martz@gmail.com>
 *  Modified to be a flood device: Mike Maat <mmaat@ualberta.ca>
 *  Date: 2016-02-27
 *  Cosmetically Tweaked By: Mike Maat <mmaat@ualberta.ca> on 2016-04-08
 */

// for the UI
metadata {
	definition (name: "DSC Zone Flood", author: "jordan@xeron.cc/mmaat@ualberta.ca", namespace: 'DSC') {
		// Change or define capabilities here as needed
		capability "Water Sensor"
		capability "Sensor"
		capability "Momentary"

		// Add commands as needed
		command "zone"
		command "bypass"
	}

	simulator {
		// Nothing here, you could put some testing stuff here if you like
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"zone", type: "generic", width: 6, height: 4){
			tileAttribute ("device.motion", key: "PRIMARY_CONTROL") {
				attributeState "open", label:'Dry', icon:"st.alarm.water.dry", backgroundColor:"#ffffff"
				attributeState "closed", label:'Flood', icon:"st.alarm.water.wet", backgroundColor:"#ff0000"
				attributeState "alarm", label:'Flood', icon:"st.alarm.water.wet", backgroundColor:"#ff0000"
			}
    		}
		standardTile ("trouble", "device.trouble", width: 2, height: 2, title: "Trouble") {
			state "restore", label: 'No Trouble', icon: "st.security.alarm.clear"
			state "tamper", label: 'Tamper', icon: "st.security.alarm.alarm", backgroundColor: "#ffa81e"
			state "fault", label: 'Fault', icon: "st.security.alarm.alarm", backgroundColor: "#ff1e1e"
		}
		standardTile("bypass", "capability.momentary", width: 2, height: 2, title: "Bypass", decoration: "flat"){
			state "bypass", label: 'Bypass', action: "bypass", icon: "st.locks.lock.unlocked"
		}
		standardTile("spacerTile", "spacerTile", decoration: "flat", width: 1, height: 2) {
		}
    
		// This tile will be the tile that is displayed on the Hub page.
		main "zone"

		// These tiles will be displayed when clicked on the device, in the order listed here.
		details(["zone", "spacerTile", "trouble", "bypass", "spacerTile"])
	}
}

// handle commands
def bypass() {
	def zone = device.deviceNetworkId.minus('dsczone')
	parent.sendUrl("bypass?zone=${zone}")  
}

def push() {
	bypass()
}

def zone(String state) {
	// state will be a valid state for a zone (open, closed)
	// zone will be a number for the zone
	log.debug "Zone: ${state}"

	def troubleList = ['fault','tamper','restore']

	if (troubleList.contains(state)) {
		// Send final event
		sendEvent (name: "trouble", value: "${state}")
	} 
	else {
		// Since this is a motion sensor device we need to convert open to active and closed to inactive
		// before sending the event
		def eventMap = [
			'open':"dry",
			'closed':"wet",
			'alarm':"wet"
		]
		def newState = eventMap."${state}"
		// Send final event
		sendEvent (name: "water", value: "${newState}")
	}
}
